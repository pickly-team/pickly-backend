# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# github repository Actions 페이지에 나타날 이름 
name: Pickly Backend CI / CD 

# develop 브렌치에 Push되었을 경우 Workflow Trigger을 실행한다. 
on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Gradle wrapper
        run: gradle wrap

      - name: Build with Gradle
        run: ./gradlew clean :pickly-service:build -x test
        shell: bash

      ## docker build & push to AWS Registry
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pickly-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd pickly-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  deploy:
      needs: build
      name: Deploy to EC2
      runs-on: ubuntu-latest
      steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
            aws-public-ip-v4: ${{ secrets.AWS_PUBLIC_IP_V4 }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: SSH and deploy to EC2
          env:
            ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          run: |
            echo "${{ secrets.AWS_PRIVATE_KEY }}" > pickly.pem
            chmod 600 pickly.pem
            ssh -tt -o StrictHostKeyChecking=no -i "pickly.pem" ${aws-public-ip-v4} << 'EOF'
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            docker stop pickly-service
            docker rm pickly-service
            echo "docker pull"
            docker pull ${ECR_REGISTRY}/pickly-service:${{ github.sha }}
            echo "docker ps"
            docker ps -q --filter name=pickly-service | grep -q . && docker rm -f $(docker ps -aq --filter name=pickly-service)
            echo "docker run"
            ${{ secrets.DOCKER_RUN }}
            EOF
