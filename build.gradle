buildscript {
    ext {
        springBootVersion = '3.0.1'
        dependencyManagementVersion = '1.1.0.RELEASE'
        MYSQL_CONNECTOR_VERSION = "8.0.11"
        FIREBASE_ADMIN_VERSION = "8.0.0"

    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
        classpath "mysql:mysql-connector-java:${MYSQL_CONNECTOR_VERSION}"
        classpath "com.google.firebase:firebase-admin:${FIREBASE_ADMIN_VERSION}"
    }
}

subprojects {
    group 'org.pickly'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'groovy'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    // Java Version을 의미한다. 뒤의 숫자의 경우 자바 버전을 의미
    sourceCompatibility = 17

    jacoco {
        toolVersion = '0.8.5'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly "org.springframework.boot:spring-boot-starter"

        compileOnly 'org.projectlombok:lombok'
        compileOnly "org.springframework.boot:spring-boot-configuration-processor"

        annotationProcessor 'org.projectlombok:lombok'
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation 'org.springframework.boot:spring-boot-starter-test'

        // compileJava시 javax.annotation.meta.When 오류 해결
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
        testAnnotationProcessor "org.projectlombok:lombok"

        // spock
        testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
        testImplementation('org.spockframework:spock-core:2.0-M2-groovy-3.0') {
            exclude module: 'groovy-all'
        }
        testImplementation('org.spockframework:spock-spring:2.0-M2-groovy-3.0')
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }
}